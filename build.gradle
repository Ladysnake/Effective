plugins {
	id 'fabric-loom' version '1.7-SNAPSHOT'
	id 'maven-publish'
	id("io.github.ladysnake.chenille") version "0.13.1"
}

chenille {
	javaVersion = 21
	configurePublishing {
		withGithubRelease()
		withModrinthRelease()
	}
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Modrinth
	maven { url "https://api.modrinth.com/maven" }

	// Veil
	maven { url "https://maven.blamejared.com/" }

	// Mod Menu
	maven { url "https://maven.terraformersmc.com/releases/" }

	// CCA
	maven {
		name = 'Ladysnake Mods'
		url = 'https://maven.ladysnake.org/releases'
	}

	// Portinglib (for Lodestone Fabric)
	maven { url "https://mvn.devos.one/snapshots/" 	}
	maven { url "https://mvn.devos.one/releases/" 	}

	// Reach entity attributes (for Portinglib, I am going to cry)
	maven {
		url "https://maven.jamieswhiteshirt.com/libs-release"
		content {
			includeGroup "com.jamieswhiteshirt"
		}
	}
}

loom {
	accessWidenerPath = file("src/client/resources/effective.accesswidener")

	splitEnvironmentSourceSets()

	mods {
		"effective" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Veil
//	modImplementation include("foundry.veil:Veil-fabric-${project.minecraft_version}:${project.veil_version}") { transitive = true }

	// Mod Menu
	modCompileOnly "com.terraformersmc:modmenu:${mod_menu_version}"
	modRuntimeOnly "com.terraformersmc:modmenu:${mod_menu_version}"

	// CCA
	modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}"
	// Adds a dependency on a specific module
	modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-world:${project.cca_version}"
	modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}"
	// Includes Cardinal Components API as a Jar-in-Jar dependency (optional)
	include "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}"
	include "dev.onyxstudios.cardinal-components-api:cardinal-components-world:${project.cca_version}"
	include "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}"

	// midnightlib
	modImplementation "maven.modrinth:midnightlib:${project.midnightlib_version}"
	include "maven.modrinth:midnightlib:${project.midnightlib_version}"

	// satin
	modImplementation "maven.modrinth:satin-api:${project.satin_version}"
	include "maven.modrinth:satin-api:${project.satin_version}"

	// lodestone
	modImplementation "team.lodestar.lodestone:lodestone:${project.lodestone_version}"
	include "team.lodestar.lodestone:lodestone:${project.lodestone_version}"
	for (String module in portinglib_modules.split(",")) {
		include "io.github.fabricators_of_create.Porting-Lib:$module:${project.portinglib_version}"
		modImplementation "io.github.fabricators_of_create.Porting-Lib:$module:${project.portinglib_version}"
	}

	// iris and sodium
	modImplementation("maven.modrinth:sodium:${project.sodium_version}")
	modImplementation("maven.modrinth:iris:${project.iris_version}")
	runtimeOnly("org.anarres:jcpp:${project.jcpp_version}")
	implementation("io.github.douira:glsl-transformer:${project.glslTransformer_version}")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}
